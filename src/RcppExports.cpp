// This file was generated by Rcpp::compileAttributes
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// bigcolsumsChar
IntegerVector bigcolsumsChar(SEXP pBigMat, const IntegerVector& rowInd);
RcppExport SEXP bigsnpr_bigcolsumsChar(SEXP pBigMatSEXP, SEXP rowIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    __result = Rcpp::wrap(bigcolsumsChar(pBigMat, rowInd));
    return __result;
END_RCPP
}
// bigcolsumsDouble
NumericVector bigcolsumsDouble(SEXP pBigMat, const IntegerVector& rowInd);
RcppExport SEXP bigsnpr_bigcolsumsDouble(SEXP pBigMatSEXP, SEXP rowIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    __result = Rcpp::wrap(bigcolsumsDouble(pBigMat, rowInd));
    return __result;
END_RCPP
}
// symCenter
void symCenter(SEXP pBigMat, const NumericVector& means, double mean);
RcppExport SEXP bigsnpr_symCenter(SEXP pBigMatSEXP, SEXP meansSEXP, SEXP meanSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    symCenter(pBigMat, means, mean);
    return R_NilValue;
END_RCPP
}
// incrSup
void incrSup(SEXP pBigMat, const arma::mat& source);
RcppExport SEXP bigsnpr_incrSup(SEXP pBigMatSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type source(sourceSEXP);
    incrSup(pBigMat, source);
    return R_NilValue;
END_RCPP
}
// complete
void complete(SEXP pBigMat);
RcppExport SEXP bigsnpr_complete(SEXP pBigMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    complete(pBigMat);
    return R_NilValue;
END_RCPP
}
// scaling
arma::mat& scaling(arma::mat& source, const NumericVector& mean, const NumericVector& sd);
RcppExport SEXP bigsnpr_scaling(SEXP sourceSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd(sdSEXP);
    __result = Rcpp::wrap(scaling(source, mean, sd));
    return __result;
END_RCPP
}
// scaling2
arma::mat& scaling2(arma::mat& source, const NumericVector& intercept, const NumericVector& slope);
RcppExport SEXP bigsnpr_scaling2(SEXP sourceSEXP, SEXP interceptSEXP, SEXP slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< arma::mat& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type slope(slopeSEXP);
    __result = Rcpp::wrap(scaling2(source, intercept, slope));
    return __result;
END_RCPP
}
// rawToBigPart
void rawToBigPart(const arma::Mat<unsigned char>& source, SEXP pBigMat, int colOffset);
RcppExport SEXP bigsnpr_rawToBigPart(SEXP sourceSEXP, SEXP pBigMatSEXP, SEXP colOffsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< const arma::Mat<unsigned char>& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< int >::type colOffset(colOffsetSEXP);
    rawToBigPart(source, pBigMat, colOffset);
    return R_NilValue;
END_RCPP
}
// R_squared_chr
Rcpp::NumericVector R_squared_chr(SEXP pBigMat, const IntegerVector& rowInd, const IntegerVector& colInd, const NumericVector& colMat0);
RcppExport SEXP bigsnpr_R_squared_chr(SEXP pBigMatSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP colMat0SEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type colMat0(colMat0SEXP);
    __result = Rcpp::wrap(R_squared_chr(pBigMat, rowInd, colInd, colMat0));
    return __result;
END_RCPP
}
// R_squared
NumericVector R_squared(SEXP pBigMat, const NumericVector& y, const IntegerVector& rowInd, const NumericVector& weights);
RcppExport SEXP bigsnpr_R_squared(SEXP pBigMatSEXP, SEXP ySEXP, SEXP rowIndSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    __result = Rcpp::wrap(R_squared(pBigMat, y, rowInd, weights));
    return __result;
END_RCPP
}
// betasRegLin
NumericMatrix betasRegLin(SEXP pBigMat, const NumericVector& y, const IntegerVector& rowInd, const NumericVector& weights);
RcppExport SEXP bigsnpr_betasRegLin(SEXP pBigMatSEXP, SEXP ySEXP, SEXP rowIndSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject __result;
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    __result = Rcpp::wrap(betasRegLin(pBigMat, y, rowInd, weights));
    return __result;
END_RCPP
}
// deepcopyPart
void deepcopyPart(SEXP pBigMat, SEXP pBigMat2, const IntegerVector& rowInd, const IntegerVector& colInd);
RcppExport SEXP bigsnpr_deepcopyPart(SEXP pBigMatSEXP, SEXP pBigMat2SEXP, SEXP rowIndSEXP, SEXP colIndSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope __rngScope;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat2(pBigMat2SEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    deepcopyPart(pBigMat, pBigMat2, rowInd, colInd);
    return R_NilValue;
END_RCPP
}
