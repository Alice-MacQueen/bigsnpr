// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// mycount
IntegerMatrix mycount(const SEXP pBigMat, const IntegerVector& indCase, const IntegerVector& indControl);
RcppExport SEXP bigsnpr_mycount(SEXP pBigMatSEXP, SEXP indCaseSEXP, SEXP indControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type indCase(indCaseSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type indControl(indControlSEXP);
    rcpp_result_gen = Rcpp::wrap(mycount(pBigMat, indCase, indControl));
    return rcpp_result_gen;
END_RCPP
}
// mycount2
ListOf<SEXP> mycount2(SEXP pBigMat, const IntegerVector& indCase, const IntegerVector& indControl);
RcppExport SEXP bigsnpr_mycount2(SEXP pBigMatSEXP, SEXP indCaseSEXP, SEXP indControlSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type indCase(indCaseSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type indControl(indControlSEXP);
    rcpp_result_gen = Rcpp::wrap(mycount2(pBigMat, indCase, indControl));
    return rcpp_result_gen;
END_RCPP
}
// tcrossprodEigen
void tcrossprodEigen(SEXP res, const Eigen::Map<Eigen::MatrixXd> bM);
RcppExport SEXP bigsnpr_tcrossprodEigen(SEXP resSEXP, SEXP bMSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res(resSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type bM(bMSEXP);
    tcrossprodEigen(res, bM);
    return R_NilValue;
END_RCPP
}
// tcrossprodEigen2
void tcrossprodEigen2(SEXP res, const Eigen::Map<Eigen::MatrixXd> X, const Eigen::Map<Eigen::MatrixXd> Y);
RcppExport SEXP bigsnpr_tcrossprodEigen2(SEXP resSEXP, SEXP XSEXP, SEXP YSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type res(resSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type X(XSEXP);
    Rcpp::traits::input_parameter< const Eigen::Map<Eigen::MatrixXd> >::type Y(YSEXP);
    tcrossprodEigen2(res, X, Y);
    return R_NilValue;
END_RCPP
}
// bigcolsumsChar
IntegerVector bigcolsumsChar(SEXP pBigMat, const IntegerVector& rowInd);
RcppExport SEXP bigsnpr_bigcolsumsChar(SEXP pBigMatSEXP, SEXP rowIndSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    rcpp_result_gen = Rcpp::wrap(bigcolsumsChar(pBigMat, rowInd));
    return rcpp_result_gen;
END_RCPP
}
// bigcolsumsDouble
NumericVector bigcolsumsDouble(SEXP pBigMat);
RcppExport SEXP bigsnpr_bigcolsumsDouble(SEXP pBigMatSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    rcpp_result_gen = Rcpp::wrap(bigcolsumsDouble(pBigMat));
    return rcpp_result_gen;
END_RCPP
}
// symCenter
void symCenter(SEXP pBigMat, const NumericVector& means, double mean);
RcppExport SEXP bigsnpr_symCenter(SEXP pBigMatSEXP, SEXP meansSEXP, SEXP meanSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type means(meansSEXP);
    Rcpp::traits::input_parameter< double >::type mean(meanSEXP);
    symCenter(pBigMat, means, mean);
    return R_NilValue;
END_RCPP
}
// colCenter
void colCenter(SEXP pBigMat, const NumericVector& means);
RcppExport SEXP bigsnpr_colCenter(SEXP pBigMatSEXP, SEXP meansSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type means(meansSEXP);
    colCenter(pBigMat, means);
    return R_NilValue;
END_RCPP
}
// incrSup
void incrSup(SEXP pBigMat, const NumericMatrix& source);
RcppExport SEXP bigsnpr_incrSup(SEXP pBigMatSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type source(sourceSEXP);
    incrSup(pBigMat, source);
    return R_NilValue;
END_RCPP
}
// incrAll
void incrAll(SEXP pBigMat, const NumericMatrix& source);
RcppExport SEXP bigsnpr_incrAll(SEXP pBigMatSEXP, SEXP sourceSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericMatrix& >::type source(sourceSEXP);
    incrAll(pBigMat, source);
    return R_NilValue;
END_RCPP
}
// complete
void complete(SEXP pBigMat);
RcppExport SEXP bigsnpr_complete(SEXP pBigMatSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    complete(pBigMat);
    return R_NilValue;
END_RCPP
}
// scaling
NumericMatrix& scaling(NumericMatrix& source, const NumericVector& mean, const NumericVector& sd);
RcppExport SEXP bigsnpr_scaling(SEXP sourceSEXP, SEXP meanSEXP, SEXP sdSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type mean(meanSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type sd(sdSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling(source, mean, sd));
    return rcpp_result_gen;
END_RCPP
}
// scaling2
NumericMatrix& scaling2(NumericMatrix& source, const NumericVector& intercept, const NumericVector& slope);
RcppExport SEXP bigsnpr_scaling2(SEXP sourceSEXP, SEXP interceptSEXP, SEXP slopeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< NumericMatrix& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type intercept(interceptSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type slope(slopeSEXP);
    rcpp_result_gen = Rcpp::wrap(scaling2(source, intercept, slope));
    return rcpp_result_gen;
END_RCPP
}
// rawToBigPart
void rawToBigPart(const IntegerMatrix& source, SEXP pBigMat, int colOffset);
RcppExport SEXP bigsnpr_rawToBigPart(SEXP sourceSEXP, SEXP pBigMatSEXP, SEXP colOffsetSEXP) {
BEGIN_RCPP
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const IntegerMatrix& >::type source(sourceSEXP);
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< int >::type colOffset(colOffsetSEXP);
    rawToBigPart(source, pBigMat, colOffset);
    return R_NilValue;
END_RCPP
}
// R_squared_chr
Rcpp::NumericVector R_squared_chr(SEXP pBigMat, const IntegerVector& rowInd, const IntegerVector& colInd, const NumericVector& colMat0);
RcppExport SEXP bigsnpr_R_squared_chr(SEXP pBigMatSEXP, SEXP rowIndSEXP, SEXP colIndSEXP, SEXP colMat0SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type colInd(colIndSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type colMat0(colMat0SEXP);
    rcpp_result_gen = Rcpp::wrap(R_squared_chr(pBigMat, rowInd, colInd, colMat0));
    return rcpp_result_gen;
END_RCPP
}
// R_squared
NumericVector R_squared(SEXP pBigMat, const NumericVector& y, const IntegerVector& rowInd, const NumericVector& weights);
RcppExport SEXP bigsnpr_R_squared(SEXP pBigMatSEXP, SEXP ySEXP, SEXP rowIndSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(R_squared(pBigMat, y, rowInd, weights));
    return rcpp_result_gen;
END_RCPP
}
// betasRegLin
NumericMatrix betasRegLin(SEXP pBigMat, const NumericVector& y, const IntegerVector& rowInd, const NumericVector& weights);
RcppExport SEXP bigsnpr_betasRegLin(SEXP pBigMatSEXP, SEXP ySEXP, SEXP rowIndSEXP, SEXP weightsSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type pBigMat(pBigMatSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const IntegerVector& >::type rowInd(rowIndSEXP);
    Rcpp::traits::input_parameter< const NumericVector& >::type weights(weightsSEXP);
    rcpp_result_gen = Rcpp::wrap(betasRegLin(pBigMat, y, rowInd, weights));
    return rcpp_result_gen;
END_RCPP
}
