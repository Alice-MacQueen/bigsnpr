
// Clumping in a restricted number of SNPs
// [[Rcpp::export]]
LogicalVector local_clumping(const S4& BM,
                             const IntegerVector& rowInd,
                             const IntegerVector& colInd,
                             const IntegerVector& ordInd,
                             const NumericVector& sumX,
                             const NumericVector& denoX,
                             double thr) {

  XPtr<BigMatrix> xpMat = BM.slot("address");
  RawSubMatAcc macc(*xpMat, rowInd-1, colInd-1, BM.slot("code"));

  int n = macc.nrow();
  int m = macc.ncol();

  double xySum, num, r2;
  int i, j, j0, k;

  LogicalVector remain(m, true); // init with all true
  LogicalVector keep(m); // init with all false

  for (k = 0; k < m; k++) {
    j0 = ordInd[k] - 1;
    if (remain[j0]) { // if already excluded, goto next
      remain[j0] = false;
      keep[j0] = true;
      for (j = 0; j < m; j++) {
        if (remain[j]) { // if already excluded, goto next
          xySum = 0;
          for (i = 0; i < n; i++) {
            xySum += macc(i, j) * macc(i, j0);
          }
          num = xySum - sumX[j] * sumX[j0] / n;
          r2 = num * num / (denoX[j] * denoX[j0]);
          if (r2 > thr) remain[j] = false; // prune
        }
      }
    }
  }

  return keep;
}

/******************************************************************************/

# get indices to exclude in a small region of LD
clumping.local <- function(G2, ind.row, ind.col, thr.r2) {

  # cache some computations
  stats <- big_colstats(G2, ind.row = ind.row, ind.col = ind.col)
  n <- length(ind.row)
  denoX <- (n - 1) * stats$var
  nploidy <- getOption("bigsnpr.nploidy")
  p <- stats$sum / (nploidy * n)
  maf <- pmin(p, 1 - p)

  # main algo
  keep <- local_clumping(G2,
                         rowInd = ind.row,
                         colInd = ind.col,
                         ordInd = order(maf, decreasing = TRUE),
                         sumX = stats$sum,
                         denoX = denoX,
                         thr = thr.r2)

  ind.col[!keep]
}


